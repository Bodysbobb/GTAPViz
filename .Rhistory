input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4Plot")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARPlot")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "GTAPv7"
# Chunk 5: Preparing Data for Plot
# Define variables to extract
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file  = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder
)
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Define the sublists to keep in the first list
reg_dim <- c("qgdp", "ppriv", "EV", "tot", "u")
reg_sl4 <- sl4.plot.data[reg_dim]
reg_sl4_map <- sl4plot[sl4plot$Variable %in% reg_dim, ]
reg_oth_sl4 <- sl4.plot.data[setdiff(names(sl4.plot.data), reg_dim)]
reg_oth_map <- sl4plot[!sl4plot$Variable %in% reg_dim, ]
# Chunk 6: Comparison Plot
lapply(reg_sl4, function(df) {
comparison_plot(df,
x_axis_from = "Region",
plot_var = reg_sl4_map,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_x_axis = FALSE,
separate_figure = FALSE,
color_tone = "grey",
width = 20,
height = 12,
legend_position = "bottom")})
report_table(reg_sl4, vars = reg_sl4_map$Variable,
col_names = reg_sl4_map$PlotTitle,
x_axis_from = "Region",
output_dir = output.folder)
Macros <- do.call(gtap_macros_data, c(as.list(paste0(input.folder, "/", case.name, ".sl4")),
list(experiment_names = case.name)))
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4Plot")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARPlot")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "GTAPv7"
# Chunk 5: Preparing Data for Plot
# Define variables to extract
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file  = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder
)
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Define the sublists to keep in the first list
reg_dim <- c("qgdp", "ppriv", "EV", "tot", "u")
reg_sl4 <- sl4.plot.data[reg_dim]
reg_sl4_map <- sl4plot[sl4plot$Variable %in% reg_dim, ]
reg_oth_sl4 <- sl4.plot.data[setdiff(names(sl4.plot.data), reg_dim)]
reg_oth_map <- sl4plot[!sl4plot$Variable %in% reg_dim, ]
# Chunk 6: Comparison Plot
lapply(reg_sl4, function(df) {
comparison_plot(df,
x_axis_from = "Region",
plot_var = reg_sl4_map,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_x_axis = FALSE,
separate_figure = FALSE,
color_tone = "grey",
width = 20,
height = 12,
legend_position = "bottom")})
report_table(reg_sl4, vars = reg_sl4_map$Variable,
col_names = reg_sl4_map$PlotTitle,
x_axis_from = "Region",
output_dir = output.folder)
# Chunk 7: GTAP Macro Plot
Macros <- do.call(gtap_macros_data, c(as.list(paste0(input.folder, "/", case.name, ".sl4")),
list(experiment_names = case.name)))
# Selecting Variables
selected_marcro <- c("pgdpwld", "qgdpwld", "vgdpwld")
macros_new_name <- c("pgdpwld", "qgdpwld", "vgdpwld")
macro.map <- data.frame(
Variable = selected_marcro,
PlotTitle = macros_new_name,
stringsAsFactors = FALSE
)
# Plotting
macro_plot(Macros,
plot_var = macro.map,
compare_by_x_axis = FALSE,
color_tone = "grey",
output_dir = output.folder,
panel_rows = 2,
width = 45,
separate_figure = FALSE,
legend_position = "bottom")
# Reporting Table
scalar_table(Macros, vars = selected_marcro,
output_dir = output.folder)
lapply(reg_oth_sl4, function(df) {
detail_plot(df,
y_axis_from = c("Commodity", "Activity"),
figure_separate_by = "Region",
plot_var = reg_oth_map,
output_dir = output.folder,
top_impact = NULL,
panel_rows = 1,
panel_cols = 8,
width = 45)})
# Rename Value if needed
welfare <- har.plot.data[["A"]]
welfare[["Variable"]] <- "Welfare"
welfare <- rename_value(har.plot.data[["A"]],
column_name = "COLUMN",
original_values = c("alloc_A1", "ENDWB1", "tech_C1", "pop_D1", "pref_G1", "tot_E1", "IS_F1"),
new_values = c("Alloc Eff.", "Endwb", "Tech Chg.", "Pop", "Perf", "ToT", "I-S"))
# Define Decomposition
stack_plot(data = welfare,
x_axis_from = "Region",
stack_value_from = "COLUMN",
title_prefix = "Decomposition",
output_dir = output.folder,
separate_figure = FALSE,
color_tone = "green",
width = 30,
height = 15,
legend_position = "bottom",
unstack_plot = FALSE)
rm(list=ls())
devtools::document()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4Plot")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARPlot")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "GTAPv7"
# Chunk 5: Preparing Data for Plot
# Define variables to extract
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file  = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder
)
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Define the sublists to keep in the first list
reg_dim <- c("qgdp", "ppriv", "EV", "tot", "u")
reg_sl4 <- sl4.plot.data[reg_dim]
reg_sl4_map <- sl4plot[sl4plot$Variable %in% reg_dim, ]
reg_oth_sl4 <- sl4.plot.data[setdiff(names(sl4.plot.data), reg_dim)]
reg_oth_map <- sl4plot[!sl4plot$Variable %in% reg_dim, ]
# Chunk 6: Comparison Plot
lapply(reg_sl4, function(df) {
comparison_plot(df,
x_axis_from = "Region",
plot_var = reg_sl4_map,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_x_axis = FALSE,
separate_figure = FALSE,
color_tone = "grey",
width = 20,
height = 12,
legend_position = "bottom")})
report_table(reg_sl4, vars = reg_sl4_map$Variable,
col_names = reg_sl4_map$PlotTitle,
x_axis_from = "Region",
output_dir = output.folder)
# Chunk 7: GTAP Macro Plot
Macros <- do.call(gtap_macros_data, c(as.list(paste0(input.folder, "/", case.name, ".sl4")),
list(experiment_names = case.name)))
# Selecting Variables
selected_marcro <- c("pgdpwld", "qgdpwld", "vgdpwld")
macros_new_name <- c("pgdpwld", "qgdpwld", "vgdpwld")
macro.map <- data.frame(
Variable = selected_marcro,
PlotTitle = macros_new_name,
stringsAsFactors = FALSE
)
# Plotting
macro_plot(Macros,
plot_var = macro.map,
compare_by_x_axis = FALSE,
color_tone = "grey",
output_dir = output.folder,
panel_rows = 2,
width = 45,
separate_figure = FALSE,
legend_position = "bottom")
# Reporting Table
scalar_table(Macros, vars = selected_marcro,
output_dir = output.folder)
# Rename Value if needed
welfare <- har.plot.data[["A"]]
welfare[["Variable"]] <- "Welfare"
welfare <- rename_value(har.plot.data[["A"]],
column_name = "COLUMN",
original_values = c("alloc_A1", "ENDWB1", "tech_C1", "pop_D1", "pref_G1", "tot_E1", "IS_F1"),
new_values = c("Alloc Eff.", "Endwb", "Tech Chg.", "Pop", "Perf", "ToT", "I-S"))
# Define Decomposition
stack_plot(data = welfare,
x_axis_from = "Region",
stack_value_from = "COLUMN",
title_prefix = "Decomposition",
output_dir = output.folder,
separate_figure = FALSE,
color_tone = "green",
width = 30,
height = 15,
legend_position = "bottom",
unstack_plot = FALSE)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4Plot")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARPlot")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "GTAPv7"
# Chunk 5: Preparing Data for Plot
# Define variables to extract
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file  = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder
)
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Define the sublists to keep in the first list
reg_dim <- c("qgdp", "ppriv", "EV", "tot", "u")
reg_sl4 <- sl4.plot.data[reg_dim]
reg_sl4_map <- sl4plot[sl4plot$Variable %in% reg_dim, ]
reg_oth_sl4 <- sl4.plot.data[setdiff(names(sl4.plot.data), reg_dim)]
reg_oth_map <- sl4plot[!sl4plot$Variable %in% reg_dim, ]
# Chunk 6: Comparison Plot
lapply(reg_sl4, function(df) {
comparison_plot(df,
x_axis_from = "Region",
plot_var = reg_sl4_map,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_x_axis = FALSE,
separate_figure = FALSE,
color_tone = "grey",
width = 20,
height = 12,
legend_position = "bottom")})
report_table(reg_sl4, vars = reg_sl4_map$Variable,
col_names = reg_sl4_map$PlotTitle,
x_axis_from = "Region",
output_dir = output.folder)
# Chunk 7: GTAP Macro Plot
Macros <- do.call(gtap_macros_data, c(as.list(paste0(input.folder, "/", case.name, ".sl4")),
list(experiment_names = case.name)))
# Selecting Variables
selected_marcro <- c("pgdpwld", "qgdpwld", "vgdpwld")
macros_new_name <- c("pgdpwld", "qgdpwld", "vgdpwld")
macro.map <- data.frame(
Variable = selected_marcro,
PlotTitle = macros_new_name,
stringsAsFactors = FALSE
)
# Plotting
macro_plot(Macros,
plot_var = macro.map,
compare_by_x_axis = FALSE,
color_tone = "grey",
output_dir = output.folder,
panel_rows = 2,
width = 45,
separate_figure = FALSE,
legend_position = "bottom")
# Reporting Table
scalar_table(Macros, vars = selected_marcro,
output_dir = output.folder)
# Rename Value if needed
welfare <- har.plot.data[["A"]]
welfare[["Variable"]] <- "Welfare"
welfare <- rename_value(har.plot.data[["A"]],
column_name = "COLUMN",
original_values = c("alloc_A1", "ENDWB1", "tech_C1", "pop_D1", "pref_G1", "tot_E1", "IS_F1"),
new_values = c("Alloc Eff.", "Endwb", "Tech Chg.", "Pop", "Perf", "ToT", "I-S"))
# Define Decomposition
stack_plot(data = welfare,
x_axis_from = "Region",
stack_value_from = "COLUMN",
title_prefix = "Decomposition",
output_dir = output.folder,
separate_figure = FALSE,
color_tone = "green",
width = 30,
height = 15,
legend_position = "bottom",
unstack_plot = FALSE)
# Table of Decomposition
decomp_table(har.plot.data,
header = c("A", "E1"),
wide_cols = list(A = "COLUMN", E1 = "PRICES"),
total_column = TRUE,
output_dir = output.folder,
export_table = TRUE)
rm(list=ls())
devtools::document()
devtools::build_manual(path = "D:/GitHub/HARplus/inst/docs")
usethis::use_mit_license("Pattawee Puangchit")
pkgdown::build_site
