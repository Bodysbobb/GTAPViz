}
n_panels <- length(unique(data[[facet_var]]))
# For the single comparison plot, ensure we have a proper panel layout
n_panels <- length(unique(data[[facet_var]]))
if (!is.null(panel_rows) && !is.null(panel_cols)) {
# Check if the provided dimensions are sufficient
if (panel_rows * panel_cols < n_panels) {
# Adjust columns to fit all panels
panel_cols <- ceiling(n_panels / panel_rows)
}
panel_layout <- list(rows = panel_rows, cols = panel_cols)
} else if (!is.null(panel_rows)) {
panel_layout <- list(rows = panel_rows, cols = ceiling(n_panels / panel_rows))
} else if (!is.null(panel_cols)) {
panel_layout <- list(rows = ceiling(n_panels / panel_cols), cols = panel_cols)
} else {
# Auto calculate layout
if (n_panels <= 1) {
panel_layout <- list(rows = 1, cols = 1)
} else if (n_panels <= 3) {
panel_layout <- list(rows = 1, cols = n_panels)
} else if (n_panels <= 4) {
panel_layout <- list(rows = 2, cols = 2)
} else if (n_panels <= 6) {
panel_layout <- list(rows = 2, cols = 3)
} else if (n_panels <= 9) {
panel_layout <- list(rows = 3, cols = 3)
} else if (n_panels <= 12) {
panel_layout <- list(rows = 3, cols = 4)
} else {
# For larger numbers, try to keep the grid roughly square
cols <- ceiling(sqrt(n_panels))
rows <- ceiling(n_panels / cols)
panel_layout <- list(rows = rows, cols = cols)
}
}
value_range <- range(data$Value)
y_range <- diff(value_range)
y_limits <- if (tolower(unit) == "percent") {
max_abs_value <- max(abs(value_range))
c(-max_abs_value * 1.15, max_abs_value * 1.15)
} else {
c(value_range[1] - 0.1 * y_range, value_range[2] + 0.1 * y_range)
}
label_position <- sapply(data$Value, function(x) {
if(x >= 0) x + diff(y_limits) * 0.03 else x - diff(y_limits) * 0.03
})
if (!is.null(color_tone)) {
color_palette <- .generate_comparison_colors(data, color_tone,
compare_by_experiment, x_var)
}
# Format the unit for axis label
y_axis_label <- ifelse(tolower(unit) == "percent", "Percentage (%)", unit)
p <- ggplot2::ggplot(data, ggplot2::aes_string(
x = x_var,
y = "Value",
fill = x_var)) +
ggplot2::geom_bar(stat = "identity",
position = ggplot2::position_dodge(width = 0.9)) +
ggplot2::geom_text(
ggplot2::aes(y = label_position,
label = sprintf("%.2f", Value)),
position = ggplot2::position_dodge(width = 0.9),
size = 5,
color = "black"
) +
ggplot2::labs(title = plot_title, x = NULL, y = y_axis_label) +
ggplot2::scale_y_continuous(limits = y_limits, oob = scales::squish) +
ggplot2::geom_hline(yintercept = 0, linetype = "dashed",
color = "black") +
ggplot2::theme_minimal()
if (!is.null(color_tone)) {
p <- p + ggplot2::scale_fill_manual(values = color_palette)
}
if (n_panels > 1) {
p <- p + ggplot2::facet_wrap(
as.formula(paste("~", facet_var)),
scales = "fixed",
nrow = panel_layout$rows,
ncol = panel_layout$cols
)
}
p <- p + ggplot2::theme(
axis.text.x = ggplot2::element_text(size = 14, angle = 45, hjust = 1, face = "bold"),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 16, face = "bold",
margin = ggplot2::margin(0, 20, 0, 0)),
plot.title = ggplot2::element_text(hjust = 0.5, size = 20, face = "bold",
margin = ggplot2::margin(10, 0, 10, 0)),
strip.background = ggplot2::element_rect(fill = "lightgrey"),
strip.text = ggplot2::element_text(size = 16, face = "bold",
margin = ggplot2::margin(10, 0, 10, 0)),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
plot.background = ggplot2::element_rect(fill = "white", color = NA),
panel.background = ggplot2::element_rect(fill = "white", color = NA),
panel.spacing.x = ggplot2::unit(2, "cm"),
legend.title = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 14),
legend.position = legend_position
)
return(p)
}
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = FALSE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = TRUE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = FALSE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = TRUE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = TRUE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = TRUE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = TRUE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = FALSE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = TRUE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = FALSE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = TRUE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = TRUE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = TRUE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = FALSE)
comparison_plot(sl4.plot.data$REG,
x_axis_from = "Variable",
split_by = "Region",
plot_var = sl4plot,
title_prefix = "Impact on",
output_dir = output.folder,
compare_by_experiment = FALSE,
description_as_title = TRUE,
separate_figure = FALSE,
color_tone = "grey",
panel_rows = NULL,
panel_cols = NULL,
width = 20,
height = 12,
legend_position = "bottom",
invert_panel = FALSE)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
rm(list=ls())
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4File")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARFile")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
#devtools::install_github("Bodysbobb/GTAPViz")
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "Mix"
# Chunk 5: Preparing Data for Plot
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder,
subtotal = FALSE
)
# Chunk 7: Optional Convert Unit and Rename Columns
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Chunk 9
knitr::include_graphics("vignettes/images/EV_billion_USD.png")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
rm(list=ls())
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4File")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARFile")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
#devtools::install_github("Bodysbobb/GTAPViz")
# Chunk 3: package
library(GTAPViz)
# Chunk 4: Input Setup
# Define experiment name / output name
case.name <- c("US_All", "US_All_RetalTar", "US_All_ReduceTar50", "US_All_RegReduceTar50",
"US_All10", "US_All10_RetalTar", "US_All10_ReduceTar50", "US_All10_RegReduceTar50")
# Adding Description / Unit (Yes/No/GTAPv7/Mix)
info.mode <- "Mix"
# Chunk 5: Preparing Data for Plot
# Region to be plotted
selected_regions <- c("USA", "CHN", "CAN", "ASEAN", "ROW")
# Sector to be plotted (NULL to select all)
selected_sector <- NULL
# Extract data with region and experiment filters
plot.dta <- plot_gtap_data(
sl4file = sl4plot,
harfile = harplot,
experiment  = case.name,
mapping_info = info.mode,
region_select  = selected_regions,
sector_select = selected_sector,
project_dir = project.folder,
subtotal = FALSE
)
# Chunk 7: Optional Convert Unit and Rename Columns
# Convert Value if Needed
sl4.plot.data <- convert_units(
sl4.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
har.plot.data <- convert_units(
har.plot.data,
change_unit_from = c("million USD"),
change_unit_to = c("billion USD"),
adjustment = c("/1000")
)
# Convert the column name if needed
rename_col <- data.frame(
old = c("REG", "COMM", "ACTS"),
new = c("Region", "Commodity", "Activity")
)
sl4.plot.data <- HARplus::rename_dims(sl4.plot.data, rename_col)
har.plot.data <- HARplus::rename_dims(har.plot.data, rename_col)
# Chunk 9
knitr::include_graphics("vignettes/images/EV_billion_USD.png")
report_table(sl4.plot.data, vars = Variable,
col_names = Description,
x_axis_from = "Region",
output_dir = output.folder)
report_table(sl4.plot.data$REG, vars = Variable,
col_names = Description,
x_axis_from = "Region",
output_dir = output.folder)
report_table(sl4.plot.data$REG, vars = sl4.plot.data$Variable,
col_names = Description,
x_axis_from = "Region",
output_dir = output.folder)
report_table(sl4.plot.data$REG, vars = sl4plot$Variable,
col_names = Description,
x_axis_from = "Region",
output_dir = output.folder)
report_table(sl4.plot.data$REG, vars = sl4plot$Variable,
col_names = sl4plot$Description,
x_axis_from = "Region",
output_dir = output.folder)
scalar_table(Macros, vars = selected_marcro,
output_dir = output.folder)
# Selecting Variables
selected_marcro <- c("pgdpwld", "qgdpwld", "vgdpwld")
macros_new_name <- c("pgdpwld", "qgdpwld", "vgdpwld")
# Rename
macro.map <- data.frame(
Variable = selected_marcro,
Description = macros_new_name,
stringsAsFactors = FALSE
)
scalar_table(Macros, vars = selected_marcro,
output_dir = output.folder)
Macros <- do.call(gtap_macros_data, c(as.list(paste0(input.folder, "/", case.name, ".sl4")),
list(experiment_names = case.name)))
# Selecting Variables
selected_marcro <- c("pgdpwld", "qgdpwld", "vgdpwld")
macros_new_name <- c("pgdpwld", "qgdpwld", "vgdpwld")
# Rename
macro.map <- data.frame(
Variable = selected_marcro,
Description = macros_new_name,
stringsAsFactors = FALSE
)
macro_plot(Macros,
plot_var = macro.map,
compare_by_experiment = FALSE,
color_tone = "grey",
output_dir = output.folder,
description_as_title = FALSE,
panel_rows = 2,
width = 45,
separate_figure = FALSE,
legend_position = "bottom")
# Rename Value if needed
rename.region <- data.frame(
ColumnName = "Region",
OldName = c("USA", "CHN"),
NewName = c("United States", "China"),
stringsAsFactors = FALSE
)
har.plot.data <- rename_value(har.plot.data, mapping.file = wefare.decomp.rename)
rename.region <- data.frame(
ColumnName = "Region",
OldName = c("USA", "CHN"),
NewName = c("United States", "China"),
stringsAsFactors = FALSE
)
har.plot.data <- rename_value(har.plot.data, mapping.file = rename.region)
View(har.plot.data)
View(har.plot.data[["A"]])
View(sl4.plot.data)
View(sl4.plot.data[["REG"]])
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
rm(list=ls())
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4File")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARFile")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE,
message = FALSE,
eval = requireNamespace("GTAPViz", quietly = TRUE)
)
rm(list=ls())
required_pkgs <- c("tidyverse", "writexl", "dplyr", "devtools",
"openxlsx", "readxl", "knitr", "rmarkdown", "data.table",
"ggplot2", "tcltk", "gridExtra", "haven", "citation", "tinytex", "bookdown", "HARplus")
# Load packages quietly, but only if available
lapply(required_pkgs, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
warning(sprintf("Package '%s' is not installed. Please install it before running this vignette.", pkg))
}
})
# Directory
project.folder <- "D:/One Drive/OneDrive - purdue.edu/GTAPViz Data/Plot"
input.folder <- paste0(project.folder, "/in")
output.folder <- paste0(project.folder, "/out")
map.folder <- paste0(project.folder, "/map")
mapping.output <- paste0(map.folder, "/OutputMapping.xlsx")
sl4plot <- readxl::read_xlsx(mapping.output, sheet = "SL4File")
harplot <- readxl::read_xlsx(mapping.output, sheet = "HARFile")
setwd <- "D:/GitHub/GTAPViz/R"
devtools::load_all()
